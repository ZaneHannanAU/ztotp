{"version":3,"file":"test.js","sourceRoot":"","sources":["../src/test.ts"],"names":[],"mappings":";;AAAA,mCAAwC;AAExC,MAAM,SAAS,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;AAC3D,MAAM,QAAQ,GAAyE;IACtF,IAAI,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC5B,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;IAC9B,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC;CAC9B,CAAA;AAED,MAAM,UAAU,GAAiD;IAChE,IAAI,EAAE;QACL,IAAI,EAAE,QAAU;QAChB,YAAY,EAAE,OAAS;QACvB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,aAAa,EAAE,QAAU;KACzB;IACD,MAAM,EAAE;QACP,IAAI,EAAE,QAAU;QAChB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,aAAa,EAAE,QAAU;KACzB;IACD,MAAM,EAAE;QACP,IAAI,EAAE,QAAU;QAChB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,YAAY,EAAE,QAAU;QACxB,aAAa,EAAE,QAAU;KACzB;CACD,CAAA;AAED,aAAK,CAAC,EAAC,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAC,CAAC,CAAA;AAEhF,KAAK,MAAM,GAAG,IAAI,UAAU,EAAE;IAC7B,OAAO,CAAC,GAAG,CACV,qFAAqF,EACrF,GAAG,EACH,QAAQ,CAAC,GAAG,CAAC,CAAC,UAAU,EACxB,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,EAC/B,QAAQ,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAC7B,CAAA;IACD,KAAK,MAAM,QAAQ,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;QACvC,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,CAAA;QAC1C,MAAM,QAAQ,GAAG,CAAC,QAAQ,GAAG,IAAK,CAAA;QAClC,MAAM,IAAI,GAAG,eAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,CAAC,CAAA;QAErD,OAAO,CAAC,MAAM,CACb,IAAI,KAAK,QAAQ,EACjB,YAAY,QAAQ,KAAK,QAAQ,CAAC,QAAQ,CAAC,EAAE,CAAC,eAAe,IAAI,KAAK,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAC3F,CAAA;QACD,IAAI,IAAI,KAAK,QAAQ;YAAE,OAAO,CAAC,GAAG,CACjC,sEAAsE,EACtE,GAAG,EACH,QAAQ,EACR,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,WAAW,EAAE,EAChC,CAAC,EACD,GAAG,EACH,QAAQ,CACR,CAAA;KACD;IACD,OAAO,CAAC,GAAG,CAAC,cAAc,EAAE,aAAK,CAAC,EAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC,EAAC,CAAC,CAAC,CAAA;CAChF","sourcesContent":["import { getTOTP, toURI } from './ztotp'\n\nconst sha512key = Buffer.allocUnsafe(64).fill('1234567890')\nconst testKeys:{sha1: Buffer; sha256: Buffer; sha512: Buffer; [key: string]: Buffer} = {\n\tsha1: sha512key.slice(0, 20),\n\tsha256: sha512key.slice(0, 32),\n\tsha512: sha512key.slice(0, 64)\n}\n\nconst testExpect:{[alg: string]: {[unixtime: number]: number}} = {\n\tsha1: {\n\t\t'59': 94_287_082,\n\t\t'1111111109': 7_081_804,\n\t\t'1111111111': 14_050_471,\n\t\t'1234567890': 89_005_924,\n\t\t'2000000000': 69_279_037,\n\t\t'20000000000': 65_353_130\n\t},\n\tsha256: {\n\t\t'59': 46_119_246,\n\t\t'1111111109': 68_084_774,\n\t\t'1111111111': 67_062_674,\n\t\t'1234567890': 91_819_424,\n\t\t'2000000000': 90_698_825,\n\t\t'20000000000': 77_737_706\n\t},\n\tsha512: {\n\t\t'59': 90_693_936,\n\t\t'1111111109': 25_091_201,\n\t\t'1111111111': 99_943_326,\n\t\t'1234567890': 93_441_116,\n\t\t'2000000000': 38_618_901,\n\t\t'20000000000': 47_863_826\n\t}\n}\n\ntoURI({secret: testKeys.sha256, alg: 'sha256', length: 8, period: 31, epoch: 1})\n// definitely emit all the warnings\nfor (const alg in testExpect) {\n\tconsole.log(\n\t\t'testing TOTP using %s, using secret of %d byte length (%s)\\n  secret as hex: <0x%s>',\n\t\talg,\n\t\ttestKeys[alg].byteLength,\n\t\ttestKeys[alg].toString('ascii'),\n\t\ttestKeys[alg].toString('hex')\n\t)\n\tfor (const unixtime in testExpect[alg]) {\n\t\tconst expected = testExpect[alg][unixtime]\n\t\tconst datetime = +unixtime * 1_000\n\t\tconst totp = getTOTP(testKeys[alg], datetime, 8, alg)\n\n\t\tconsole.assert(\n\t\t\ttotp === expected,\n\t\t\t`expected ${expected} (${expected.toString(16)}), recieved ${totp} (${totp.toString(16)}).`\n\t\t)\n\t\tif (totp === expected) console.log(\n\t\t\t'  test passed: getTOTP(testKeys.%s, %d /*%s*/, %d, %s) === %d \\u2705',\n\t\t\talg,\n\t\t\tdatetime,\n\t\t\tnew Date(datetime).toUTCString(),\n\t\t\t8,\n\t\t\talg,\n\t\t\texpected\n\t\t)\n\t}\n\tconsole.log('URI test: %s', toURI({secret: testKeys[alg], alg: alg, length: 8}))\n}\n"]}